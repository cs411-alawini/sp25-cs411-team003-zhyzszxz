Assumptions and Explanations
Customers:
  Reason: A single attribute for a “user” is inadequate because we need multiple details (zip_code_prefix, city, state, etc.).
  Assumption: customer_id is unique (primary key).
Orders:
  Reason: An order is not just a status attribute—it’s a significant concept containing timestamps, status, and multiple line items, payments, and reviews.
  Assumption: order_id is unique, referencing exactly one customer.
OrderItems:
  Reason: Each order can contain multiple products, each with different pricing or shipping limits. If we tried to store product details in Orders, we’d have repeating groups. A separate entity normalizes these repeating line items.
  Assumption: Composite primary key (order_id, product_id) ensures unique line items.
Payments:
 Reason: We allow multiple payment records (installments or partial payments) for a single order.
 Assumption: Composite primary key (order_id, payment_sequential) ensures each order can have multiple payment entries.
Reviews:
  Reason: A review includes rating, comment, creation date, etc.
  Assumption: review_id is the primary key; order_id is a foreign key to connect the review to a single order. (Assume review_id is globally unique.)
Products：
  Reason: A product has multiple descriptive attributes (weight, dimensions, category).
  Assumption: product_id is the primary key, and product_category_name references a category translation table.
CategoryTranslation：
  Reason: This table maps Portuguese category names to English.
  Assumption: product_category_name is the primary key; product_category_name_english is the translation.
Sellers：
  Reason: Each seller is different, with a distinct ID, city, and state.
  Assumption: seller_id is unique (primary key).
Geolocation：
  Reason: Storing lat/long data for every customer or seller row would be highly duplicative, especially if they share the same zip_code_prefix.
  Assumption: This table can be matched on zip_code_prefix; it is treated as a many-to-many link because multiple customers/sellers can share a prefix, and one prefix can match multiple city/state entries.

Relationship Cardinalities and Assumptions
Customers → Orders: (1 : 0..*)：
  A single customer can place many orders, but an order belongs to exactly one customer.
Orders → OrderItems: (1 : 0..*)：
  One order may have many line items (products). Each line item references exactly one order.
Orders → Payments: (1 : 0..*)：
  Each order may be split across multiple payment records; each payment belongs to exactly one order.
Orders → Reviews: (1 : 0..*)：
  An order can have zero, one, or multiple reviews; each review is tied to exactly one order.
OrderItems → Products: (0..* : 1)：
  Multiple order items can reference the same product. Each item references exactly one product.
OrderItems → Sellers: (0..* : 1)：
  Each order item is sold by exactly one seller; one seller can have many line items across many orders.
Orders → Products: (0..*,0..*)：
  An order can include multiple products, and a product can be included in multiple orders. (Implemented as a composite key (order_id, product_id) in the physical schema.)
Products → Sellers: (0..*,1)：
  Each product is sold by exactly one seller, but one seller can offer many products.
Products → CategoryTranslation: (0..* : 1)：
  Many products might share the same category label.
Customers/Sellers → Geolocation: (0..* : 0..*)：
  Multiple customers (or sellers) can share the same zip_code_prefix, and each prefix can appear multiple times in the Geolocation table.
 
4. Normalization:
1NF:
Result: Every table in the scheme meets the criteria for 1NF.

We check:
      Each column must store a single value.
      There should be no nested relations or multiple values stored in a single field.

Customers:
  Contains customer_id, customer_city, and customer_state as individual, atomic values.
Orders:
  Attributes such as order_id, customer_id, and various timestamp fields each hold a single value.
OrderItems:
  Every attribute (e.g., order_id, product_id, shipping_limit_date, price, freight_value) is stored as an atomic value.
  Even though there’s an order_item_id originally, our revised schema uses a composite key (order_id, product_id) that uniquely identifies each record without storing multiple values in a single field.
Payments:
  Contains individual values for each attribute, including the composite key (order_id, payment_sequential).
Reviews:
  Stores review details in separate columns (e.g., review_id, review_score, review_comment_message).
Products:
  Each attribute (like product_id, product_category_name, and the various product measurements) is atomic.
  seller_id is stored as a single value.
CategoryTranslation:
  Maps one category name to its English translation using atomic values.
Sellers:
  Stores seller details (seller_id, seller_zip_code_prefix, seller_city, seller_state) as single values.
Geolocation:
  Each attribute (e.g., geolocation_zip_code_prefix, geolocation_lat, geolocation_city) is atomic.

2NF:
Result: Each table meets 2NF, ensuring that there are no partial dependencies on a subset of a composite key.
We check:
      For tables with a single-attribute primary key, all other attributes must directly depend on that key.
      For tables with composite keys, each non-key attribute must depend on the whole key, not just part of it.

Customers:
  Primary Key: customer_id
  All non–key attributes (customer_city, customer_state) depend entirely on customer_id.
Orders:
  Primary Key: order_id
  Every other attribute (e.g., order_status, various timestamps) is directly dependent on order_id.
OrderItems:
  Composite Key: (order_id, product_id)
  Attributes such as shipping_limit_date, price, and freight_value depend on the full composite key, ensuring no partial dependency.
Payments:
  Composite Key: (order_id, payment_sequential)
  Each payment attribute (like payment_type, payment_value) fully depends on the combination of order_id and payment_sequential.
Reviews:
  Primary Key: review_id
  All review details depend solely on review_id.
Products:
  Primary Key: product_id
  All descriptive attributes and seller_id depend directly on product_id.
CategoryTranslation:
  Primary Key: product_category_name
  The translation attribute (product_category_name_english) is fully dependent on the category name.
Sellers:
  Primary Key: seller_id
  Attributes like seller_zip_code_prefix, seller_city, and seller_state depend solely on seller_id.
Geolocation:
  Primary Key (assumed): geolocation_zip_code_prefix
  Each geographic detail (latitude, longitude, city, state) is fully dependent on this key.

3NF:
Overall, the schema is in 3NF because every non–key attribute depends directly on its primary key, with the note that any transitive dependency (such as geographic data in Customers and Sellers) can be addressed by leveraging the separate Geolocation table if a stricter design is desired.
We check:
      that each non–key attribute is directly dependent on the primary key.
      Eliminate any indirect (transitive) dependencies where a non–key attribute determines another non–key attribute.

Orders, OrderItems, Payments, Reviews, Products, CategoryTranslation, Geolocation:
  For these tables, every non–key attribute (like order_status, payment_type, or product dimensions) is directly dependent on the primary key.
  There are no instances where a non–key attribute depends on another non–key attribute, so they are 3NF.

Customers:
  Current Schema: Contains customer_id, customer_city, and customer_state.
  Explanation: Since there is no zip code attribute in this version, both customer_city and customer_state are assumed to depend solely on customer_id.
  Potential Issue: If a customer_zip_code_prefix were included and if that attribute determined the city and state, then a transitive dependency would exist.
  Fix (if needed): Decompose the table by removing the geographic details (city/state) from Customers and referencing them via the Geolocation table, thereby eliminating the transitive dependency.

Sellers:
  Current Schema: Contains seller_id, seller_zip_code_prefix, seller_city, and seller_state.
  Explanation: These attributes are intended to depend on the seller's unique identifier.
  Potential Issue: If seller_zip_code_prefix uniquely determines seller_city and seller_state, then there is a transitive dependency (i.e., seller_zip_code_prefix → seller_city, seller_state).
  Fix (if needed): Remove seller_city and seller_state from the Sellers table and retrieve them through a relationship with the Geolocation table. This change would fully eliminate the transitive dependency and bring the table into strict 3NF.

5. Logical Design (Relational Schema)
 
Customers(
  customer_id : VARCHAR [PK],
  customer_city : VARCHAR,
  customer_state : VARCHAR
)
 
Orders(
  order_id : VARCHAR [PK],
  customer_id : VARCHAR [FK to Customers.customer_id],
  order_status : VARCHAR,
  order_purchase_timestamp : TIMESTAMP,
  order_approved_at : TIMESTAMP,
  order_delivered_carrier_date : TIMESTAMP,
  order_delivered_customer_date : TIMESTAMP,
  order_estimated_delivery_date : TIMESTAMP
)
 
OrderItems(
  order_id : VARCHAR [FK to Orders.order_id],
  product_id : VARCHAR [FK to Products.product_id],
  shipping_limit_date : TIMESTAMP,
  price : DECIMAL,
  freight_value : DECIMAL,
  [PK(order_id, product_id)]
)
 
Payments(
  order_id : VARCHAR [FK to Orders.order_id],
  payment_sequential : INT,
  payment_type : VARCHAR,
  payment_installments : INT,
  payment_value : DECIMAL,
  [PK(order_id, payment_sequential)]
)
 
Reviews(
  review_id : VARCHAR [PK],
  order_id : VARCHAR [FK to Orders.order_id],
  review_score : INT,
  review_comment_title : VARCHAR,
  review_comment_message : VARCHAR,
  review_creation_date : TIMESTAMP,
  review_answer_timestamp : TIMESTAMP
)
 
Products(
  product_id : VARCHAR [PK],
  product_category_name : VARCHAR,
  product_name_length : INT,
  product_description_length : INT,
  product_photos_qty : INT,
  product_weight_g : INT,
  product_length_cm : INT,
  product_height_cm : INT,
  product_width_cm : INT,
  seller_id : INT
)
 
CategoryTranslation(
  product_category_name : VARCHAR [PK],
  product_category_name_english : VARCHAR
)
 
Sellers(
  seller_id : INT [PK],
  seller_zip_code_prefix : INT,
  seller_city : VARCHAR,
  seller_state : VARCHAR
)
 
Geolocation(
  geolocation_zip_code_prefix : INT,
  geolocation_lat : DECIMAL,
  geolocation_lng : DECIMAL,
  geolocation_city : VARCHAR,
  geolocation_state : VARCHAR
)
